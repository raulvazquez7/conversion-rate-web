plot_ly(temp,x = temp$channelGrouping, y = temp$conversionRate ,type = "scatter", mode = "markers",
name = "Conversion Rate") %>%
add_trace(df,x = df$channelGrouping, y = df$sessions ,type = "scatter", mode = "markers",
name = "Visits", yaxis = "y2",
transforms = list(list(
type = "aggregate",
groups = df$channelGrouping,
aggregations = list(list(target = "y", func = "sum",enabled = TRUE))))) %>%
layout(title = "Conversion (avg) per Channel",
xaxis = list(title = "Channel Group"),
yaxis = list(showline = TRUE, side = "left",title = "Conversion Rate (avg)"),
yaxis2 = list(showline = TRUE,side = "right",overlaying = "y",title = "Sessions (M)")) #CR and Sessions per Channel
plot_ly(temp,x = temp$channelGrouping, y = temp$conversionRate ,type = "scatter", mode = "markers",
name = "Conversion Rate") %>%
add_trace(df,x = df$channelGrouping, y = df$sessions ,type = "scatter", mode = "markers",
name = "Visits", yaxis = "y2",
transforms = list(list(
type = "aggregate",
groups = df$channelGrouping,
aggregations = list(list(target = "y", func = "sum",enabled = TRUE))))) %>%
layout(title = "Conversion (avg) per Channel",
xaxis = list(title = "Channel Group"),
yaxis = list(showline = TRUE, side = "left",title = "Conversion Rate (avg)", ticksuffix = "%"),
yaxis2 = list(showline = TRUE,side = "right",overlaying = "y",title = "Sessions (M)")) #CR and Sessions per Channel
mean_channel <- aggregate(list(conversionRate = df$conversionRate), list(channelGrouping = factor(df$channelGrouping)), mean)
rm(temp)
mean_age <- aggregate(list(conversionRate = df$conversionRate), list(userAgeBracket = factor(df$userAgeBracket)), mean)
View(mean_channel)
View(mean_age)
plot_ly(mean_age,x = mean_age$userAgeBracket, y = mean_age$conversionRate ,type = "scatter", mode = "markers",
name = "Conversion Rate") %>%
add_trace(df,x = df$userAgeBracket, y = df$sessions ,type = "scatter", mode = "markers",
name = "Visits", yaxis = "y2",
transforms = list(list(
type = "aggregate",
groups = df$userAgeBracket,
aggregations = list(list(target = "y", func = "sum",enabled = TRUE))))) %>%
layout(title = "Conversion (avg) per Channel",
xaxis = list(title = "Channel Group"),
yaxis = list(showline = TRUE, side = "left",title = "Conversion Rate (avg)", ticksuffix = "%"),
yaxis2 = list(showline = TRUE,side = "right",overlaying = "y",title = "Sessions (M)")) #CR and Sessions per Channel
mean_type <- aggregate(list(conversionRate = df$conversionRate), list(userType = factor(df$userType)), mean)
plot_ly(mean_type,x = mean_type$userType, y = mean_type$conversionRate ,type = "scatter", mode = "markers",
name = "Conversion Rate") %>%
add_trace(df,x = df$userType, y = df$sessions ,type = "scatter", mode = "markers",
name = "Visits", yaxis = "y2",
transforms = list(list(
type = "aggregate",
groups = df$userType,
aggregations = list(list(target = "y", func = "sum",enabled = TRUE))))) %>%
layout(title = "Conversion (avg) per Channel",
xaxis = list(title = "Channel Group"),
yaxis = list(showline = TRUE, side = "left",title = "Conversion Rate (avg)", ticksuffix = "%"),
yaxis2 = list(showline = TRUE,side = "right",overlaying = "y",title = "Sessions (M)")) #CR and Sessions per Channel
View(mean_type)
plot_ly(mean_type,x = mean_type$userType, y = mean_type$conversionRate ,type = "scatter", mode = "markers",
name = "Conversion Rate") %>%
add_trace(df,x = df$userType, y = df$sessions ,type = "scatter", mode = "markers",
name = "Visits", yaxis = "y2",
transforms = list(list(
type = "aggregate",
groups = df$userType,
aggregations = list(list(target = "y", func = "sum",enabled = TRUE))))) %>%
layout(title = "Conversion (avg) per Channel",
xaxis = list(title = "Channel Group"),
yaxis = list(showline = TRUE, side = "left",title = "Conversion Rate (avg)", ticksuffix = "%", range = c(0.4, 1.6)),
yaxis2 = list(showline = TRUE,side = "right",overlaying = "y",title = "Sessions (M)")) #CR and Sessions per Channel
pacman::p_load(readr, lubridate, dplyr, plotly, corrplot)
sum_type <- aggregate(list(conversionRate = df$conversionRate), list(userType = factor(df$userType)), sum)
View(sum_type)
sum_type <- aggregate(list(sessions = df$sessions), list(userType = factor(df$userType)), sum)
rm(sum_type)
high_cr <- df %>% dplyr::filter(conversionRate >= 30)
rm(outlier)
View(high_cr)
View(df)
mean_df <- aggregate(df$conversionRate, df[,2:4] , mean)
View(mean_df)
mean_df <- aggregate(df$conversionRate, df[,2:4] , mean)[order(df$conversionRate),]
mean_df <- aggregate(mean = df$conversionRate, df[,2:4] , mean)[order(df$conversionRate),]
mean_df <- aggregate(average = df$conversionRate, df[,2:4] , mean)[order(df$conversionRate),]
mean_df <- aggregate(df$conversionRate, df[,2:4] , mean)[order(df$conversionRate),]
mean_df <- aggregate(df$conversionRate, df[,2:4] , mean)[order(,df$conversionRate)]
mean_df <- aggregate(df$conversionRate, df[,2:4] , mean)[order(mean_df$x, )]
mean_df <- aggregate(df$conversionRate, df[,2:4] , mean)[order(mean_df$x),]
mean_df <- aggregate(df$conversionRate, df[,2:4] , mean)
mean_df[order(mean_df$x), ]
mean_df[order(mean_df$x, decreasing = TRUE), ]
mean_df <- aggregate(df$conversionRate, df[,2:4] , mean)
colnames(mean_df)[4] <- "conversionRate"
mean_df[order(mean_df$x, decreasing = TRUE), ]
mean_df <- aggregate(df$conversionRate, df[,2:4] , mean)
colnames(mean_df)[4] <- "conversionRate"
mean_df[order(mean_df$conversionRate, decreasing = TRUE), ]
chooseCRANmirror(graphics=FALSE, ind=1)
knitr::opts_chunk$set(echo = TRUE)
install.packages("pacman")
pacman::p_load(readr, lubridate, dplyr, ggplot2, plotly)
df <- read_csv("~/Raúl Vázquez/Personal/Test Metriplica/results_df.csv")
sapply(df, function(x) sum(is.na(x)))
str(df)
summary(df)
df$date <- lubridate:: ymd(df$date) #Fecha
df$channelGrouping <- sub("(^[^-]+)-.*", "\\1", df$channelGrouping) # Nos quedamos con el primer grupo
col_names <- c("channelGrouping","userAgeBracket","userType")
df[,col_names] <- lapply(df[,col_names] , factor) # Convertimos varias columnas a factor
rm(col_names)
df$conversionRate <- (df$transactions/df$sessions)*100
mean_df <- aggregate(df$conversionRate, df[,2:4] , mean)
colnames(mean_df)[4] <- "conversionRate"
chooseCRANmirror(graphics=FALSE, ind=1)
knitr::opts_chunk$set(echo = TRUE)
install.packages("pacman")
pacman::p_load(readr, lubridate, dplyr, ggplot2, plotly)
df <- read_csv("~/Raúl Vázquez/Personal/Test Metriplica/results_df.csv")
sapply(df, function(x) sum(is.na(x)))
str(df)
summary(df)
df$date <- lubridate:: ymd(df$date) #Fecha
df$channelGrouping <- sub("(^[^-]+)-.*", "\\1", df$channelGrouping) # Nos quedamos con el primer grupo
col_names <- c("channelGrouping","userAgeBracket","userType")
df[,col_names] <- lapply(df[,col_names] , factor) # Convertimos varias columnas a factor
rm(col_names)
df$conversionRate <- (df$transactions/df$sessions)*100
mean_df <- aggregate(df$conversionRate, df[,2:4] , mean)
colnames(mean_df)[4] <- "conversionRate"
mean_df[order(mean_df$conversionRate, decreasing = TRUE), ]
install.packages("pacman")
View(high_cr)
head(high_cr, 11)
plot_ly(byday, x = byday$date, y = ~(transactions/sessions)*100,
name = 'CR', type = 'scatter', mode = 'lines') %>%
layout(yaxis = list(ticksuffix = "%")) %>%
layout(title = "CR in 2019 per Day",
xaxis = list(title = "Time"),
yaxis = list (title = "Conversion Rate")) #CR per Day
byday <- df %>% dplyr::group_by(date=floor_date(date, "day")) %>%
dplyr::summarize_at(vars(sessions, transactions), funs(sum)) #grouping by day
plot_ly(byday, x = byday$date, y = ~(transactions/sessions)*100,
name = 'CR', type = 'scatter', mode = 'lines') %>%
layout(yaxis = list(ticksuffix = "%")) %>%
layout(title = "CR in 2019 per Day",
xaxis = list(title = "Time"),
yaxis = list (title = "Conversion Rate")) #CR per Day
View(byday)
plot_ly(byweek, x = byweek$date, y = ~(transactions/sessions)*100,
name = 'CR', type = 'scatter', mode = 'lines') %>%
layout(yaxis = list(ticksuffix = "%")) %>%
layout(title = "CR in 2019 per Week",
xaxis = list(title = "Time"),
yaxis = list (title = "Conversion Rate")) #CR per Week
byweek <- df %>% dplyr::group_by(date=floor_date(date, "week")) %>%
dplyr::summarize_at(vars(sessions, transactions), funs(sum)) #grouping by week
plot_ly(byweek, x = byweek$date, y = ~(transactions/sessions)*100,
name = 'CR', type = 'scatter', mode = 'lines') %>%
layout(yaxis = list(ticksuffix = "%")) %>%
layout(title = "CR in 2019 per Week",
xaxis = list(title = "Time"),
yaxis = list (title = "Conversion Rate")) #CR per Week
byweek_channel <- df %>% dplyr::group_by(date=floor_date(date, "week"), channelGrouping) %>%
dplyr::summarize_at(vars(sessions, transactions), funs(sum)) #grouping by week
View(byweek_channel)
rm(byweek_channel)
byweek_probando <- df %>% dplyr::group_by(date=floor_date(date, "week")) %>%
dplyr::summarize_at(vars(sessions, transactions), funs(sum)) #grouping by week
View(byweek_probando)
byweek_probando$conversionRate <- byweek_probando$transactions/byweek_probando$sessions
byweek_probando$conversionRate <- byweek_probando$transactions/byweek_probando$sessions*100
plot_ly(byweek_probando,x = byweek_probando$date, y = byweek_probando$conversionRate ,type = "scatter", mode = "lines",
name = "Conversion Rate") %>%
add_trace(byweek,x = byweek$date, y = byweek$sessions ,type = "scatter", mode = "lines",
name = "Sessions", yaxis = "y2",
transforms = list(list(
type = "aggregate",
groups = df$userType,
aggregations = list(list(target = "y", func = "sum",enabled = TRUE))))) %>%
layout(title = "Conversion (mean) and Sessions in 2019 (all audience)",
xaxis = list(title = "Time"),
yaxis = list(showline = TRUE, side = "left",title = "Conversion Rate (mean)", ticksuffix = "%", range = c(0.4, 1.6)),
yaxis2 = list(showline = TRUE,side = "right",overlaying = "y",title = "Sessions (Millions)")) #CR and Sessions per User Type
min(byweek_probando$sessions)
max(byweek_probando$sessions)
plot_ly(byweek_probando,x = byweek_probando$date, y = byweek_probando$conversionRate ,type = "scatter", mode = "lines",
name = "Conversion Rate") %>%
add_trace(byweek,x = byweek$date, y = byweek$sessions ,type = "scatter", mode = "lines",
name = "Sessions", yaxis = "y2",
transforms = list(list(
type = "aggregate",
groups = df$userType,
aggregations = list(list(target = "y", func = "sum",enabled = TRUE))))) %>%
layout(title = "Conversion (mean) and Sessions in 2019 (all audience)",
xaxis = list(title = "Time"),
yaxis = list(showline = TRUE, side = "left",title = "Conversion Rate (mean)", ticksuffix = "%", range = c(0.2, 2)),
yaxis2 = list(showline = TRUE,side = "right",overlaying = "y",
title = "Sessions (Millions)", range = c(25000, 700000))) #CR and Sessions per User Type
plot_ly(byweek_probando,x = byweek_probando$date, y = byweek_probando$conversionRate ,type = "scatter", mode = "lines",
name = "Conversion Rate") %>%
add_trace(byweek,x = byweek$date, y = byweek$sessions ,type = "scatter", mode = "lines",
name = "Sessions", yaxis = "y2",
transforms = list(list(
type = "aggregate",
groups = byweek$date,
aggregations = list(list(target = "y", func = "sum",enabled = TRUE))))) %>%
layout(title = "Conversion (mean) and Sessions in 2019 (all audience)",
xaxis = list(title = "Time"),
yaxis = list(showline = TRUE, side = "left",title = "Conversion Rate (mean)", ticksuffix = "%", range = c(0.2, 2)),
yaxis2 = list(showline = TRUE,side = "right",overlaying = "y",
title = "Sessions (Millions)", range = c(25000, 700000))) #CR and Sessions per User Type
bymonth_y2 <- df %>% dplyr::group_by(date=floor_date(date, "week")) %>%
dplyr::summarize_at(vars(sessions, transactions), funs(sum)) #grouping by week for the second y axes
bymonth_y2 <- df %>% dplyr::group_by(date=floor_date(date, "month")) %>%
dplyr::summarize_at(vars(sessions, transactions), funs(sum)) #grouping by week for the second y axes
byweek_y2 <- df %>% dplyr::group_by(date=floor_date(date, "week")) %>%
dplyr::summarize_at(vars(sessions, transactions), funs(sum)) #grouping by week for the second y axes
byweek_y2$conversionRate <- byweek_y2$transactions/byweek_y2$sessions*100
plot_ly(byweek_y2,x = byweek_y2$date, y = byweek_y2$conversionRate ,type = "scatter", mode = "lines",
name = "Conversion Rate") %>%
add_trace(byweek,x = byweek$date, y = byweek$sessions ,type = "scatter", mode = "lines",
name = "Sessions", yaxis = "y2",
transforms = list(list(
type = "aggregate",
groups = byweek$date,
aggregations = list(list(target = "y", func = "sum",enabled = TRUE))))) %>%
layout(title = "Conversion (mean) and Sessions in 2019 by week (all audience)",
xaxis = list(title = "Time"),
yaxis = list(showline = TRUE, side = "left",title = "Conversion Rate (mean)", ticksuffix = "%", range = c(0.2, 2)),
yaxis2 = list(showline = TRUE,side = "right",overlaying = "y",
title = "Sessions (Miles)", range = c(25000, 700000))) #CR and Sessions per User Type
rm(byweek_probando)
bymonth <- df %>% dplyr::group_by(date=floor_date(date, "month")) %>%
dplyr::summarize_at(vars(sessions, transactions), funs(sum)) #grouping by month
max(bymonth$sessions)
min(bymonth$sessions)
bymonth_y2$conversionRate <- bymonth_y2$transactions/bymonth_y2$sessions*100
min(bymonth_y2$conversionRate)
max(bymonth_y2$conversionRate)
plot_ly(bymonth_y2,x = bymonth_y2$date, y = bymonth_y2$conversionRate ,type = "scatter", mode = "lines",
name = "Conversion Rate") %>%
add_trace(bymonth,x = bymonth$date, y = bymonth$sessions ,type = "scatter", mode = "lines",
name = "Sessions", yaxis = "y2",
transforms = list(list(
type = "aggregate",
groups = bymonth$date,
aggregations = list(list(target = "y", func = "sum",enabled = TRUE))))) %>%
layout(title = "Conversion (mean) and Sessions in 2019 by week (all audience)",
xaxis = list(title = "Time"),
yaxis = list(showline = TRUE, side = "left",title = "Conversion Rate (mean)", ticksuffix = "%", range = c(0.3, 1.8)),
yaxis2 = list(showline = TRUE,side = "right",overlaying = "y",
title = "Sessions (Miles)", range = c(1000000, 2700000))) #CR and Sessions per User Type
byday <- df %>% dplyr::group_by(date=floor_date(date, "day")) %>%
dplyr::summarize_at(vars(sessions, transactions), funs(sum)) #grouping by day
byday <- df %>% dplyr::group_by(date=floor_date(date, "day")) %>%
dplyr::summarize_at(vars(sessions, transactions), funs(sum)) #grouping by day
byday_y2 <- df %>% dplyr::group_by(date=floor_date(date, "day")) %>%
dplyr::summarize_at(vars(sessions, transactions), funs(sum)) #grouping by week for the second y axes
byday_y2$conversionRate <- byday_y2$transactions/byday_y2$sessions*100
max(byday_y2$sessions)
min(byday_y2$sessions)
min(byday_y2$conversionRate)
max(byday_y2$conversionRate)
plot_ly(byday_y2,x = byday_y2$date, y = byday_y2$conversionRate ,type = "scatter", mode = "lines",
name = "Conversion Rate") %>%
add_trace(byday,x = byday$date, y = byday$sessions ,type = "scatter", mode = "lines",
name = "Sessions", yaxis = "y2",
transforms = list(list(
type = "aggregate",
groups = byday$date,
aggregations = list(list(target = "y", func = "sum",enabled = TRUE))))) %>%
layout(title = "Conversion (mean) and Sessions in 2019 by month (all audience)",
xaxis = list(title = "Time"),
yaxis = list(showline = TRUE, side = "left",title = "Conversion Rate (mean)", ticksuffix = "%", range = c(0.1, 2.4)),
yaxis2 = list(showline = TRUE,side = "right",overlaying = "y",
title = "Sessions (Millions)", range = c(10000, 130000))) #CR and Sessions per User Type
byweek_type %>%
ungroup() %>%
plot_ly( x = byweek_type$date, y = ~(transactions/sessions)*100, color = ~userType,
mode = "lines", type = "scatter") %>%
layout(yaxis = list(ticksuffix = "%")) %>%
layout(title = "CR in 2019 per Month",
xaxis = list(title = "Time"),
yaxis = list (title = "Conversion Rate")) #CR per Month
byweek_type <- df %>% dplyr::group_by(date=floor_date(date, "week"), userType) %>%
dplyr::summarize_at(vars(sessions, transactions), funs(sum)) #grouping by week
byweek_type %>%
ungroup() %>%
plot_ly( x = byweek_type$date, y = ~(transactions/sessions)*100, color = ~userType,
mode = "lines", type = "scatter") %>%
layout(yaxis = list(ticksuffix = "%")) %>%
layout(title = "CR in 2019 per Month",
xaxis = list(title = "Time"),
yaxis = list (title = "Conversion Rate")) #CR per Month
chooseCRANmirror(graphics=FALSE, ind=1)
knitr::opts_chunk$set(echo = TRUE)
install.packages("pacman")
pacman::p_load(readr, lubridate, dplyr, ggplot2, plotly)
df <- read_csv("~/Raúl Vázquez/Personal/Test Metriplica/results_df.csv")
sapply(df, function(x) sum(is.na(x)))
str(df)
summary(df)
df$date <- lubridate:: ymd(df$date) #Fecha
df$channelGrouping <- sub("(^[^-]+)-.*", "\\1", df$channelGrouping) # Nos quedamos con el primer grupo
col_names <- c("channelGrouping","userAgeBracket","userType")
df[,col_names] <- lapply(df[,col_names] , factor) # Convertimos varias columnas a factor
rm(col_names)
df$conversionRate <- (df$transactions/df$sessions)*100
mean_df <- aggregate(df$conversionRate, df[,2:4] , mean)
colnames(mean_df)[4] <- "conversionRate"
mean_df[order(mean_df$conversionRate, decreasing = TRUE), ]
high_cr <- df %>% dplyr::filter(conversionRate >= 30)
head(high_cr, 11)
mean_channel <- aggregate(list(conversionRate = df$conversionRate), list(channelGrouping = factor(df$channelGrouping)), mean)
plot_ly(mean_channel,x = mean_channel$channelGrouping, y = mean_channel$conversionRate ,type = "scatter", mode = "markers",
name = "Conversion Rate") %>%
add_trace(df,x = df$channelGrouping, y = df$sessions ,type = "scatter", mode = "markers",
name = "Sessions", yaxis = "y2",
transforms = list(list(
type = "aggregate",
groups = df$channelGrouping,
aggregations = list(list(target = "y", func = "sum",enabled = TRUE))))) %>%
layout(title = "Conversion (mean) and Sessions (sum) per Channel",
xaxis = list(title = "Channel Group"),
yaxis = list(showline = TRUE, side = "left",title = "Conversion Rate (mean)", ticksuffix = "%"),
yaxis2 = list(showline = TRUE,side = "right",overlaying = "y",title = "Sessions (Millions)")) #CR and Sessions per Channel
install.packages("pacman")
mean_age <- aggregate(list(conversionRate = df$conversionRate), list(userAgeBracket = factor(df$userAgeBracket)), mean)
plot_ly(mean_age,x = mean_age$userAgeBracket, y = mean_age$conversionRate ,type = "scatter", mode = "markers",
name = "Conversion Rate") %>%
add_trace(df,x = df$userAgeBracket, y = df$sessions ,type = "scatter", mode = "markers",
name = "Sessions", yaxis = "y2",
transforms = list(list(
type = "aggregate",
groups = df$userAgeBracket,
aggregations = list(list(target = "y", func = "sum",enabled = TRUE))))) %>%
layout(title = "Conversion (mean) and Sessions (sum) per Age Bracket",
xaxis = list(title = "Age Bracket"),
yaxis = list(showline = TRUE, side = "left",title = "Conversion Rate (mean)", ticksuffix = "%"),
yaxis2 = list(showline = TRUE,side = "right",overlaying = "y",title = "Sessions (Millions)")) #CR and Sessions per Age
mean_type <- aggregate(list(conversionRate = df$conversionRate), list(userType = factor(df$userType)), mean)
plot_ly(mean_type,x = mean_type$userType, y = mean_type$conversionRate ,type = "scatter", mode = "markers",
name = "Conversion Rate") %>%
add_trace(df,x = df$userType, y = df$sessions ,type = "scatter", mode = "markers",
name = "Sessions", yaxis = "y2",
transforms = list(list(
type = "aggregate",
groups = df$userType,
aggregations = list(list(target = "y", func = "sum",enabled = TRUE))))) %>%
layout(title = "Conversion (mean) and Sessions (sum) per User Type",
xaxis = list(title = "User Type"),
yaxis = list(showline = TRUE, side = "left",title = "Conversion Rate (mean)", ticksuffix = "%", range = c(0.4, 1.6)),
yaxis2 = list(showline = TRUE,side = "right",overlaying = "y",title = "Sessions (Millions)")) #CR and Sessions per User Type
byday <- df %>% dplyr::group_by(date=floor_date(date, "day")) %>%
dplyr::summarize_at(vars(sessions, transactions), funs(sum)) #grouping by day
byday_y2 <- df %>% dplyr::group_by(date=floor_date(date, "day")) %>%
dplyr::summarize_at(vars(sessions, transactions), funs(sum)) #grouping by week for the second y axes
byday_y2$conversionRate <- byday_y2$transactions/byday_y2$sessions*100
plot_ly(byday_y2,x = byday_y2$date, y = byday_y2$conversionRate ,type = "scatter", mode = "lines",
name = "Conversion Rate") %>%
add_trace(byday,x = byday$date, y = byday$sessions ,type = "scatter", mode = "lines",
name = "Sessions", yaxis = "y2",
transforms = list(list(
type = "aggregate",
groups = byday$date,
aggregations = list(list(target = "y", func = "sum",enabled = TRUE))))) %>%
layout(title = "Conversion (mean) and Sessions in 2019 by day (all audience)",
xaxis = list(title = "Time"),
yaxis = list(showline = TRUE, side = "left",title = "Conversion Rate (mean)", ticksuffix = "%", range = c(0.1, 2.4)),
yaxis2 = list(showline = TRUE,side = "right",overlaying = "y",
title = "Sessions (Miles)", range = c(10000, 130000))) #CR and Sessions per User Type
byweek <- df %>% dplyr::group_by(date=floor_date(date, "week")) %>%
dplyr::summarize_at(vars(sessions, transactions), funs(sum)) #grouping by week for the first y axes
byweek_y2 <- df %>% dplyr::group_by(date=floor_date(date, "week")) %>%
dplyr::summarize_at(vars(sessions, transactions), funs(sum)) #grouping by week for the second y axes
byweek_y2$conversionRate <- byweek_y2$transactions/byweek_y2$sessions*100
plot_ly(byweek_y2,x = byweek_y2$date, y = byweek_y2$conversionRate ,type = "scatter", mode = "lines",
name = "Conversion Rate") %>%
add_trace(byweek,x = byweek$date, y = byweek$sessions ,type = "scatter", mode = "lines",
name = "Sessions", yaxis = "y2",
transforms = list(list(
type = "aggregate",
groups = byweek$date,
aggregations = list(list(target = "y", func = "sum",enabled = TRUE))))) %>%
layout(title = "Conversion (mean) and Sessions in 2019 by week (all audience)",
xaxis = list(title = "Time"),
yaxis = list(showline = TRUE, side = "left",title = "Conversion Rate (mean)", ticksuffix = "%", range = c(0.2, 2)),
yaxis2 = list(showline = TRUE,side = "right",overlaying = "y",
title = "Sessions (Miles)", range = c(25000, 700000))) #CR and Sessions per User Type
bymonth <- df %>% dplyr::group_by(date=floor_date(date, "month")) %>%
dplyr::summarize_at(vars(sessions, transactions), funs(sum)) #grouping by month
bymonth_y2 <- df %>% dplyr::group_by(date=floor_date(date, "month")) %>%
dplyr::summarize_at(vars(sessions, transactions), funs(sum)) #grouping by week for the second y axes
bymonth_y2$conversionRate <- bymonth_y2$transactions/bymonth_y2$sessions*100
plot_ly(bymonth_y2,x = bymonth_y2$date, y = bymonth_y2$conversionRate ,type = "scatter", mode = "lines",
name = "Conversion Rate") %>%
add_trace(bymonth,x = bymonth$date, y = bymonth$sessions ,type = "scatter", mode = "lines",
name = "Sessions", yaxis = "y2",
transforms = list(list(
type = "aggregate",
groups = bymonth$date,
aggregations = list(list(target = "y", func = "sum",enabled = TRUE))))) %>%
layout(title = "Conversion (mean) and Sessions in 2019 by month (all audience)",
xaxis = list(title = "Time"),
yaxis = list(showline = TRUE, side = "left",title = "Conversion Rate (mean)", ticksuffix = "%", range = c(0.3, 1.8)),
yaxis2 = list(showline = TRUE,side = "right",overlaying = "y",
title = "Sessions (Millions)", range = c(1000000, 2700000))) #CR and Sessions per User Type
qplot(sessions, conversionRate, data = df, geom="line")
qplot(sessions, conversionRate, data = bymonth, geom="line")
qplot(sessions, conversionRate, data = bymonth_y2, geom="line")
qplot(sessions, conversionRate, data = byday_y2, geom="line")
qplot(sessions, conversionRate, data = byweek_y2, geom="line")
ggplot(df, aes(x = df$sessions, y = df$conversionRate))+
geom_point()+
geom_smooth(method = "lm")
pacman::p_load(readr, lubridate, dplyr, plotly, corrplot, tidyr)
tram <- spread(df, df[,2:4], df$sessions)
tram <- spread(df, df[2:4,], df$sessions)
tram <- spread(df, df$channelGrouping  , df$sessions)
tram <- spread(data =  df, key = df$channelGrouping , value =  df$sessions)
tram <- gather(data = df, "customerPersona", 2:4)
tram <- gather(df, "customerPersona", "Value", 2:4)
View(tram)
rm(tram)
tram <- melt(df[,2:4], value.name = "Customer")
pacman::p_load(readr, lubridate, dplyr, plotly, corrplot, tidyr, reshape2)
tram <- melt(df[,2:4], value.name = "Customer")
View(tram)
df$customer <- apply( data[ , 2:4 ] , 1 , paste , collapse = "-" )
df$customer <- apply( df[, 2:4 ] , 1 , paste , collapse = "-" )
rm(tram)
aggr_cr <- aggregate(list(conversionRate = df$conversionRate), list(customer = factor(df$customer)), mean)
View(aggr_cr)
aggr_cr <- aggregate(list(conversionRate = df$sessions), list(customer = factor(df$customer)), sum)
aggr_cr <- aggregate(list(conversionRate = df$conversionRate), list(customer = factor(df$customer)), mean)
aggr_sessions <- aggregate(list(conversionRate = df$sessions), list(customer = factor(df$customer)), sum)
View(aggr_sessions)
aggr_cr <- aggr_cr[order(aggr_cr$conversionRate, decreasing = TRUE), ]
aggr_cr <- aggregate(list(conversionRate = df$conversionRate), list(customer = factor(df$customer)), mean)
aggr_cr <- aggr_cr[order(aggr_cr$conversionRate, decreasing = TRUE), ]
aggr_cr <- aggr_cr[1:10,]
aggr_cr %>%
plot_ly( x = aggr_cr$customer, y = aggr_cr$conversionRate, type = "bar") %>%
layout(yaxis = list(ticksuffix = "%")) %>%
layout(title = "TOP 10 Conversion Rate per Customer",
xaxis = list(title = "Customer Persona"),
yaxis = list (title = "Conversion Rate (mean)")) #CR per Month
aggr_cr <- aggr_cr[order(aggr_cr$conversionRate, decreasing = TRUE), ] %>%
top_n(10)
aggr_cr %>%
plot_ly( x = aggr_cr$customer, y = aggr_cr$conversionRate, type = "bar") %>%
layout(yaxis = list(ticksuffix = "%")) %>%
layout(title = "TOP 10 Conversion Rate per Customer",
xaxis = list(title = "Customer Persona"),
yaxis = list (title = "Conversion Rate (mean)")) #CR per Month
aggr <- aggr_cr[order(aggr_cr$conversionRate, decreasing = TRUE), ] %>%
top_n(10)
aggr %>%
plot_ly( x = aggr$customer, y = aggr$conversionRate, type = "bar") %>%
layout(yaxis = list(ticksuffix = "%")) %>%
layout(title = "TOP 10 Conversion Rate per Customer",
xaxis = list(title = "Customer Persona"),
yaxis = list (title = "Conversion Rate (mean)")) #CR per Month
rm(aggr)
aggr_cr <- aggregate(list(conversionRate = df$conversionRate), list(customer = factor(df$customer)), mean)
aggr_cr <- aggr_cr[order(aggr_cr$conversionRate, decreasing = TRUE), ] %>%
top_n(10)
qplot(customer, conversionRate, data = aggr_cr)
ggplot(aggr_cr, x = aggr_cr$customer, y = aggr_cr$conversionRate)+
geom_bar()
ggplot(aggr_cr, aes(x = aggr_cr$customer, y = aggr_cr$conversionRate))+
geom_bar()
plot_ly(aggr_cr, x = aggr_cr$customer, y = aggr_cr$conversionRate, type = "bar")
plot_ly(aggr_cr, x = aggr_cr$customer, y = aggr_cr$conversionRate, type = "bar", na.rm = FALSE)
plot_ly(aggr_cr, x = aggr_cr$customer, y = aggr_cr$conversionRate, type = "bar", na.rm = TRUE)
plot_ly(aggr_cr, x = aggr_cr$customer, y = aggr_cr$conversionRate, type = "bar", na.rm = TRUE) %>%
top_n(10)
aggr_sessions <- aggregate(list(conversionRate = df$sessions), list(customer = factor(df$customer)), sum)
aggr_sessions <- aggr_sessions[order(aggr_sessions$conversionRate, decreasing = TRUE), ] %>%
top_n(10)
aggr_cr %>%
ungroup() %>%
plot_ly( x = aggr_cr$customer, y = aggr_cr$conversionRate, type = "bar") %>%
layout(yaxis = list(ticksuffix = "%")) %>%
layout(title = "CR in 2019 per Month",
xaxis = list(title = "Time"),
yaxis = list (title = "Conversion Rate")) #CR per Month
ggplot(aggr_cr, aes(x = aggr_cr$customer, y = aggr_cr$conversionRate))+
geom_bar(stat = "identity")
ggplot(aggr_cr, aes(x = aggr_cr$customer, y = aggr_cr$conversionRate))+
geom_bar(stat = "identity")+
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
ggplot(aggr_sessions, aes(x = aggr_sessions$customer, y = aggr_sessions$conversionRate))+
geom_bar(stat = "identity")+
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
ggplot(aggr_cr, aes(x = aggr_cr$customer, y = aggr_cr$conversionRate, fill = "#f5973d"))+
geom_bar(stat = "identity")+
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
ggplot(aggr_cr, aes(x = aggr_cr$customer, y = aggr_cr$conversionRate))+
geom_bar(stat = "identity",  fill = "#f5973d")+
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
ggplot(aggr_sessions, aes(x = aggr_sessions$customer, y = aggr_sessions$conversionRate))+
geom_bar(stat = "identity",  fill = "#5564eb")+
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
ggplot(aggr_cr, aes(x = aggr_cr$customer, y = aggr_cr$conversionRate))+
geom_bar(stat = "identity",  fill = "#f5973d")+
xlab("Customer")+
ylab("Conversion Rate (mean)")
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
ggplot(aggr_cr, aes(x = aggr_cr$customer, y = aggr_cr$conversionRate))+
geom_bar(stat = "identity",  fill = "#f5973d")+
ylab("Conversion Rate (mean)")
ggplot(aggr_cr, aes(x = aggr_cr$customer, y = aggr_cr$conversionRate))+
geom_bar(stat = "identity",  fill = "#f5973d")+
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
